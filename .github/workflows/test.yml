name: Test

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]

jobs:
  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v2.2.2
        with:
          python-version: "3.10"

      - name: Set up the cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-pip-${{ hashFiles('poetry.lock') }}

      - name: Set up the project
        run: |
          pip install poetry safety
          poetry config virtualenvs.in-project true
          make setup

      - name: Check if the documentation builds correctly
        run: make check-docs

      - name: Check if the code is correctly typed
        run: make check-types

  test:
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11"]
        poetry-version: [1.2.2]
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup poetry
        uses: abatilo/actions-poetry@v2.1.6
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install dependencies
        run: poetry install
      - name: Run tests
        run: poetry run pytest --cov starlette_session --cov-report=xml tests/

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: true
